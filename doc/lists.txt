*lists.txt*    A Vim plugin to handle lists
*lists.vim*

Author:  Karl Yngve Lervåg <karl.yngve@gmail.com>
License: MIT license {{{

  Copyright (c) 2021 Karl Yngve Lervåg

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to
  deal in the Software without restriction, including without limitation the
  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
  sell copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  The software is provided "as is", without warranty of any kind, express or
  implied, including but not limited to the warranties of merchantability,
  fitness for a particular purpose and noninfringement.  In no event shall the
  authors or copyright holders be liable for any claim, damages or other
  liability, whether in an action of contract, tort or otherwise, arising
  from, out of or in connection with the software or the use or other dealings
  in the software.

}}}

==============================================================================
INTRODUCTION                                                      *lists-intro*

This is a Vim plugin to manage text based lists. The plugin is inactive by
default. It can be activated for a specific buffer with |:ListsEnable|. One
can also specify to auto enable for specific filetypes with
|g:lists_filetypes|.

The functionality was earlier a part of |wiki.vim| [0] and implemented for my
personal convenience. However, as someone pointed out [1], these features do
not really have anything to do with the wiki functionality of |wiki.vim|. It
is now therefore a separate plugin.

[0]: https://github.com/lervag/wiki.vim
[1]: https://github.com/lervag/wiki.vim/issues/131

==============================================================================
LIST TYPES                                                        *lists-types*

|lists.vim| is quite minimal and does not have a lot of available
configuration choices. The implementation is based on the idea that list items
are indented consistently. The indentation makes it easy to parse a list to
determine its structure.

These types of lists are currently supported:
* Bullet lists. Bullets are either "*" or "-".
* Numbered lists formatted similar to "1.".
* List items can be decorated with check boxes. Examples:
  * [x] checked
  * [ ] unchecked
* List items can be decorated with labels like "TODO:" and "DONE:".

==============================================================================
FORMATTING                                                   *lists-formatting*

The plugin sets 'autoindent', adds |fo-n| to 'formatoptions', and sets
'formatlistpat' so that list items are indented nicely (all local to the
buffer). More precisely, 'formatlistpat' is set to (greedily) recognise the
following bullets: >

  *
  -
  * [x]
  - WORD:
  * WORD:
<
where "WORD" is any capitalised word and "x" is any single symbol or space.
This is a strictly larger class of bullets than supported in |lists-types|.

Note: Since 'comments' and 'formatlistpat' do not interact well, all comments
starting with "-" or "*" are removed when this plugin is enabled.

Note: This plugin does _not_ automatically begin new lines with the previous
line's bullet. However, |<plug>(lists-toggle)| may help.

==============================================================================
FEATURES                                                       *lists-features*

The following is a list of the commands and mappings provided by |lists.vim|.

*:ListsEnable*
  Load |lists.vim| for the current buffer.

  Note: This is the only global command. If |lists.vim| is not loaded, none of
        the other features are available.

*:ListsToggle*
*<plug>(lists-toggle)*
  Toggle a list item. The mapping works in both normal and insert mode.

*:ListsToggleBullet*
*<plug>(lists-bullet-toggle-all)*
  Toggle the list bullet type between `-` and `*`. for the entire list.

*:ListsToggleBullet!*
*<plug>(lists-bullet-toggle-local)*
  Toggle the list bullet type between `-` and `*` for the sibling list
  entries.

*:ListsMoveUp*
*:ListsMoveDown*
*<plug>(lists-moveup)*
*<plug>(lists-movedown)*
  Move current list item up/down through a list.

*:ListsUniq*
*<plug>(lists-uniq)*
  Parse the current list and remove repeated entries recursively.

*:ListsUniqLocal*
*<plug>(lists-uniq-local)*
  Similar to |:ListsUniq|, but only within the current list depth.

*<plug>(lists-al)*
*<plug>(lists-il)*
  Text object for list items. The inner object is the current list item
  including children, the outer object is the parent list item including all
  its children.
  The following mappings are available as visual mode and operator mode
  mappings, i.e. |xmap| and |omap|.

                                                          *lists-maps-defaults*
The default mappings are listed in the following table. To disable the default
mappings, see |g:lists_maps_default_enable|. They can also be overrided
individually with |g:lists_maps_default_override|. The '<leader>w' prefix is
controlled by |g:lists_maps_prefix|. The map mode is indicated by the first
letters of the various map commands (|nmap|, |imap|, |omap|, and |xmap|).

   PLUG                                DEFAULT         MODE~
   ----                                -------         ----~
   |<plug>(lists-toggle)|                <c-s>           `in`
   |<plug>(lists-moveup)|                <leader>wlk     `n`
   |<plug>(lists-movedown)|              <leader>wlj     `n`
   |<plug>(lists-uniq)|                  <leader>wlu     `n`
   |<plug>(lists-uniq-local)|            <leader>wlU     `n`
   |<plug>(lists-bullet-toggle-local)|   <leader>wlT     `n`
   |<plug>(lists-bullet-toggle-all)|     <leader>wlt     `n`
   |<plug>(lists-al)|                    al              `ox`
   |<plug>(lists-il)|                    il              `ox`

==============================================================================
CONFIGURATION                                                    *lists-config*

*g:lists_filetypes*
  List of filetypes for which |lists.vim| should be enabled.

  Default: []

*g:lists_maps_default_enable*
  Set to |v:false| or 0 to prevent |lists.vim| from applying the default maps.
  Useful if you want to create your own mappings.

  Default: |v:true|

*g:lists_maps_default_override*
  A dictionary that allows to override one or more of the default mappings.
  The dictionary keys should be one of the available mappings, possibly with
  mode indicator. The value should be the desired map target. The available
  mappings with default values are listed in |lists-maps-defaults|.

  For example, to remap the insert-mode variant of |<plug>(lists-toggle)| to
  `<c-t>` and the normal mode variant of |<plug>(lists-toggle)| to `<c-y>`,
  one could do this: >

    let g:lists_maps_default_override = {
          \ 'i_<plug>(lists-toggle)': '<c-t>',
          \ '<plug>(lists-toggle)': '<c-y>',
          \}
<
  Default: `{}`

*g:lists_maps_prefix*
  Prefix for most default mappings. The default mappings are listed in
  |lists-maps-defaults|, where '<leader>w' gets replaced by this option. This
  only affects default mappings; for finer control, see
  |g:lists_maps_default_override|.

  Default: '<leader>w'

*g:lists_todos*
  A list of TODO toggles that may be toggled with |<plug>(lists-toggle)|, which
  is by default mapped to `<c-s>`.

  Default: `['TODO', 'DONE']`

==============================================================================
 vim:tw=78:ts=8:ft=help:norl:fdm=marker:
